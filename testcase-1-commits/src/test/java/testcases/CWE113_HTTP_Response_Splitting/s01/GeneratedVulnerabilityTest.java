package testcases.CWE113_HTTP_Response_Splitting.s01;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

class CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_02Test {

    private static final String ENV_VARIABLE_NAME = "ADD";
    private String originalEnvValue;

    @BeforeEach
    void setUp() {
        // Save the original environment variable value
        originalEnvValue = System.getenv(ENV_VARIABLE_NAME);
    }

    @AfterEach
    void tearDown() {
        // Restore the original environment variable value
        if (originalEnvValue != null) {
            System.setProperty(ENV_VARIABLE_NAME, originalEnvValue);
        } else {
            System.clearProperty(ENV_VARIABLE_NAME);
        }
    }

    @Test
    void testBad() throws Throwable {
        // Set up a malicious environment variable
        String maliciousValue = "en-US\r\nSet-Cookie: sessionId=abc123";
        System.setProperty(ENV_VARIABLE_NAME, maliciousValue);

        // Create a stub for HttpServletResponse to capture cookies
        List<Cookie> cookies = new ArrayList<>();
        HttpServletResponse response = new HttpServletResponseWrapper(null) {
            @Override
            public void addCookie(Cookie cookie) {
                cookies.add(cookie);
            }
        };

        // Create a stub for HttpServletRequest (not used in this test)
        HttpServletRequest request = null;

        // Instantiate the class and call the bad method
        CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_02 servlet =
                new CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_02();
        servlet.bad(request, response);

        // Check if the cookie was added with the malicious value
        assertEquals(1, cookies.size(), "Expected one cookie to be added");
        assertEquals(maliciousValue, cookies.get(0).getValue(), "Cookie value should match the malicious input");
    }
}