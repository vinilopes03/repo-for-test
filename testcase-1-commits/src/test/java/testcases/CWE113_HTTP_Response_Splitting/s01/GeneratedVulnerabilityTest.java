package testcases.CWE113_HTTP_Response_Splitting.s01;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.PrintWriter;
import java.io.StringWriter;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

class CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_02Test {

    private CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_02 servlet;
    private HttpServletRequest request;
    private HttpServletResponse response;
    private StringWriter responseWriter;

    @BeforeEach
    void setUp() {
        servlet = new CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_02();
        request = Mockito.mock(HttpServletRequest.class);
        response = Mockito.mock(HttpServletResponse.class);
        responseWriter = new StringWriter();
        try {
            when(response.getWriter()).thenReturn(new PrintWriter(responseWriter));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    void testBad() throws Throwable {
        // Set an environment variable that simulates a malicious input
        System.setProperty("ADD", "en-US%0D%0ASet-Cookie:sessionId=malicious");

        // Call the vulnerable method
        servlet.bad(request, response);

        // Verify that a cookie is added with the potentially malicious value
        verify(response).addCookie(argThat(cookie -> {
            String value = cookie.getValue();
            return value.contains("%0D%0ASet-Cookie:sessionId=malicious");
        }));
    }

    @Test
    void testGoodG2B1() throws Throwable {
        // Call the goodG2B1 method
        servlet.goodG2B1(request, response);

        // Verify that a cookie is added with the hardcoded safe value
        verify(response).addCookie(argThat(cookie -> "foo".equals(cookie.getValue())));
    }

    @Test
    void testGoodG2B2() throws Throwable {
        // Call the goodG2B2 method
        servlet.goodG2B2(request, response);

        // Verify that a cookie is added with the hardcoded safe value
        verify(response).addCookie(argThat(cookie -> "foo".equals(cookie.getValue())));
    }

    @Test
    void testGoodB2G1() throws Throwable {
        // Set an environment variable that simulates a malicious input
        System.setProperty("ADD", "en-US%0D%0ASet-Cookie:sessionId=malicious");

        // Call the goodB2G1 method
        servlet.goodB2G1(request, response);

        // Verify that a cookie is added with the encoded value
        verify(response).addCookie(argThat(cookie -> {
            String value = cookie.getValue();
            return !value.contains("%0D%0ASet-Cookie:sessionId=malicious");
        }));
    }

    @Test
    void testGoodB2G2() throws Throwable {
        // Set an environment variable that simulates a malicious input
        System.setProperty("ADD", "en-US%0D%0ASet-Cookie:sessionId=malicious");

        // Call the goodB2G2 method
        servlet.goodB2G2(request, response);

        // Verify that a cookie is added with the encoded value
        verify(response).addCookie(argThat(cookie -> {
            String value = cookie.getValue();
            return !value.contains("%0D%0ASet-Cookie:sessionId=malicious");
        }));
    }
}