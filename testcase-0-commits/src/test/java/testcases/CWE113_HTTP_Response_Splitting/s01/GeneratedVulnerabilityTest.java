package testcases.CWE113_HTTP_Response_Splitting.s01;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_01Test {

    private static final String ENV_VARIABLE_NAME = "ADD";
    private String originalEnvValue;

    @BeforeEach
    void setUp() {
        // Save the original environment variable value
        originalEnvValue = System.getenv(ENV_VARIABLE_NAME);
    }

    @AfterEach
    void tearDown() {
        // Restore the original environment variable value
        if (originalEnvValue != null) {
            System.setProperty(ENV_VARIABLE_NAME, originalEnvValue);
        } else {
            System.clearProperty(ENV_VARIABLE_NAME);
        }
    }

    @Test
    void testBad() throws Throwable {
        // Set a malicious value in the environment variable
        String maliciousValue = "en-US\r\nSet-Cookie: sessionId=12345";
        System.setProperty(ENV_VARIABLE_NAME, maliciousValue);

        // Create a mock HttpServletResponse to capture cookies
        MockHttpServletResponse response = new MockHttpServletResponse();

        // Create an instance of the class to test
        CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_01 servlet =
                new CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_01();

        // Call the bad method
        servlet.bad(new MockHttpServletRequest(), response);

        // Check if the response contains the injected cookie
        List<Cookie> cookies = response.getCookies();
        assertEquals(1, cookies.size(), "Expected one cookie to be added");
        assertEquals("lang", cookies.get(0).getName(), "Expected cookie name to be 'lang'");
        assertEquals(maliciousValue, cookies.get(0).getValue(), "Expected cookie value to match the malicious input");
    }

    // Mock HttpServletRequest class
    private static class MockHttpServletRequest extends HttpServletRequestWrapper {
        public MockHttpServletRequest() {
            super(null);
        }
    }

    // Mock HttpServletResponse class
    private static class MockHttpServletResponse extends HttpServletResponseWrapper {
        private final List<Cookie> cookies = new ArrayList<>();

        public MockHttpServletResponse() {
            super(null);
        }

        @Override
        public void addCookie(Cookie cookie) {
            cookies.add(cookie);
        }

        public List<Cookie> getCookies() {
            return cookies;
        }
    }
}