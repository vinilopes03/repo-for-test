package testcases.CWE113_HTTP_Response_Splitting.s01;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.PrintWriter;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_01Test {

    private CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_01 servlet;
    private HttpServletRequest request;
    private HttpServletResponse response;
    private PrintWriter writer;

    @BeforeEach
    void setUp() throws Exception {
        servlet = new CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_01();
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        writer = mock(PrintWriter.class);

        when(response.getWriter()).thenReturn(writer);
    }

    @Test
    void testBad() throws Throwable {
        // Set up the environment variable to simulate a malicious input
        System.setProperty("ADD", "en-US\r\nSet-Cookie: sessionId=abc123");

        // Call the bad method
        servlet.bad(request, response);

        // Verify that a cookie was added with the malicious value
        verify(response, times(1)).addCookie(argThat(cookie -> 
            "lang".equals(cookie.getName()) && 
            "en-US\r\nSet-Cookie: sessionId=abc123".equals(cookie.getValue())
        ));
    }

    @Test
    void testGoodG2B() throws Throwable {
        // Call the goodG2B method
        servlet.good(request, response);

        // Verify that a cookie was added with the hardcoded safe value
        verify(response, times(1)).addCookie(argThat(cookie -> 
            "lang".equals(cookie.getName()) && 
            "foo".equals(cookie.getValue())
        ));
    }

    @Test
    void testGoodB2G() throws Throwable {
        // Set up the environment variable to simulate a malicious input
        System.setProperty("ADD", "en-US\r\nSet-Cookie: sessionId=abc123");

        // Call the goodB2G method
        servlet.good(request, response);

        // Verify that a cookie was added with the encoded value
        verify(response, times(1)).addCookie(argThat(cookie -> 
            "lang".equals(cookie.getName()) && 
            "en-US%0D%0ASet-Cookie%3A+sessionId%3Dabc123".equals(cookie.getValue())
        ));
    }
}