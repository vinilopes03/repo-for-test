package testcases.CWE113_HTTP_Response_Splitting.s01;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_04Test {

    private CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_04 servlet;
    private HttpServletRequest request;
    private HttpServletResponse response;

    @BeforeEach
    void setUp() {
        servlet = new CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_04();
        request = Mockito.mock(HttpServletRequest.class);
        response = Mockito.mock(HttpServletResponse.class);
    }

    @Test
    void testBad() throws Throwable {
        // Set up the environment variable to simulate the vulnerability
        System.setProperty("ADD", "en-US;lang=fr");

        // Capture the cookie added to the response
        doAnswer(invocation -> {
            Cookie cookie = invocation.getArgument(0);
            assertEquals("lang", cookie.getName());
            assertEquals("en-US;lang=fr", cookie.getValue());
            return null;
        }).when(response).addCookie(any(Cookie.class));

        // Call the vulnerable method
        servlet.bad(request, response);

        // Clean up the environment variable
        System.clearProperty("ADD");
    }
}