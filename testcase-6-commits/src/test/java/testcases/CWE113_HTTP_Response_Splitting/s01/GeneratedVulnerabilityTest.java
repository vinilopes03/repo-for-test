package testcases.CWE113_HTTP_Response_Splitting.s01;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_07Test {

    private CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_07 servlet;
    private HttpServletRequest request;
    private HttpServletResponse response;

    @BeforeEach
    void setUp() {
        servlet = new CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_07();
        request = Mockito.mock(HttpServletRequest.class);
        response = Mockito.mock(HttpServletResponse.class);
    }

    @Test
    void testBad() throws Throwable {
        // Set the environment variable to a value that could exploit the vulnerability
        String maliciousValue = "en-US\r\nSet-Cookie: sessionId=12345";
        System.setProperty("ADD", maliciousValue);

        // Call the vulnerable method
        servlet.bad(request, response);

        // Verify that a cookie was added with the malicious value
        verify(response).addCookie(any(Cookie.class));

        // Capture the cookie to check its value
        ArgumentCaptor<Cookie> cookieCaptor = ArgumentCaptor.forClass(Cookie.class);
        verify(response).addCookie(cookieCaptor.capture());
        Cookie capturedCookie = cookieCaptor.getValue();

        // Assert that the cookie value is the malicious value, indicating a vulnerability
        assertEquals(maliciousValue, capturedCookie.getValue());
    }
}