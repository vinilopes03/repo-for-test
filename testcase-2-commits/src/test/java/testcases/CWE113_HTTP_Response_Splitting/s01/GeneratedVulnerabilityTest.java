package testcases.CWE113_HTTP_Response_Splitting.s01;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.PrintWriter;
import java.io.StringWriter;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_03Test {

    private HttpServletRequest request;
    private HttpServletResponse response;
    private StringWriter responseWriter;

    @BeforeEach
    void setUp() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        responseWriter = new StringWriter();
        try {
            when(response.getWriter()).thenReturn(new PrintWriter(responseWriter));
        } catch (Exception e) {
            fail("Failed to set up mock response writer");
        }
    }

    @AfterEach
    void tearDown() {
        request = null;
        response = null;
        responseWriter = null;
    }

    @Test
    void testBadMethodForHttpResponseSplitting() throws Throwable {
        // Set up the environment variable to simulate malicious input
        String maliciousInput = "en-US%0d%0aSet-Cookie:sessionId=malicious";
        System.setProperty("ADD", maliciousInput);

        CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_03 servlet =
                new CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_03();

        // Call the 'bad' method which is vulnerable to HTTP Response Splitting
        servlet.bad(request, response);

        // Verify that the response contains the unsanitized cookie
        verify(response).addCookie(argThat(cookie -> {
            // Check if the cookie value contains the malicious input
            return cookie.getValue().equals(maliciousInput);
        }));

        // Clean up the environment variable
        System.clearProperty("ADD");
    }
}